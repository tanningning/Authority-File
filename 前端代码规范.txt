前端规范
本规范只是起指导作用，为了做到“有迹可循”。


通用指南
NPM包管理器yarn(推荐)、cnpm

package.json中的版本最好锁定

优先使用utf-8编码进行编码，如遇其他编码的模板，静态资源需保持utf-8编码

移动端定义viewport属性，一般定义格式如下,如果网站需要进行放大/缩小，需要根据实际情况定义scale的比例

<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=0;"
name="viewport"/>
UED要求:

所有可交互的操做,要有适当的响应,比如a:hover要字体或者背景变化之类的提示.

对于异步操作,需要做友好的提示.如:提交按钮变成disabled状态.

对于所有用户操或者异步交互数据做异常处理,并做相应提示.

代码优化:

尽量减少http请求数,合并请求次数,压缩代码等

对于图片要采用合适的压缩方法,对于UI提供的图片要学会自行压缩.不得上传过大的图片文件.

对于过大,过多的图片,要求使用懒加载文法.

Html代码要尽量减少dom层级

Css 代码要有可重用性,背景图片尽量拼合在一张图片里.如有矢量图标尽量用iconfont

JS 优化:尽量少用事件代理.尽量减少dom渲染次数.

推荐阅读

移动WEB性能 http://www.webperformancetoday.com/tag/mobile-web-performance/
优化WEB缓存 https://developers.google.com/speed/docs/best-practices/caching
最小化RTT次数 https://developers.google.com/speed/docs/best-practices/rtt
最小化请求负载 https://developers.google.com/speed/docs/best-practices/payload
优化浏览器渲染 https://developers.google.com/speed/docs/best-practices/rendering



命名规则
项目命名
全部采用小写方式， 以下划线分隔。

例：my_project_name

目录命名
参照项目命名规则；

有复数结构时，要采用复数命名法。

例：scripts, styles, images, data_models

JS文件命名
参照项目命名规则。

例：account_model.js

CSS, LESS, SCSS文件命名
参照项目命名规则。

例：retina_sprites.scss

HTML文件命名
参照项目命名规则。

例：error_report.html



开课啦静态资源目录结构规范
开课啦静态资源
访问域名: //static.kaike.la
访问规则为：域名 + 子系统 + 目标文件的编译输出路径
例如： //static.kaike.la/web/v2.1.0/css/kkl.css

一、目录结构大纲
开课啦静态资源分为多个子系统，子系统之间的静态资源互为独立。

// 域名下多个子系统，如下：  
static.kaike.la  
|-- web         // pc 浏览器
|-- wap         // 移动端浏览器
|-- client         // pc 客户端
|-- wechat         // 微信端
|-- native         // 
|-- ...
web子系统示例
// web 子系统
KKL_STATIC
|-- img            // 静态图片目录
|-- js            // js 目录
|-- less        // 样式
|-- plugins        // 插件目录
|-- school        // 旧静态资源迁移目录
|-- libs        // 外部引用js库目录
|-- swf            // swf 存放目录
|-- activity        // 运营活动页
 + package.json
 + README.md
 + ...

// 编译输出目录
KKL_STATIC
|-- v2.0.0        // 版本控制
|-- v2.1.0        // 版本控制
    |-- img            // 静态图片目录
    |-- js            // js 目录
    |-- css            // 样式
|-- plugins        // 插件目录
|-- school        // 旧静态资源迁移目录
|-- libs        // 外部引用js库目录
|-- swf            // swf 存放目录
|-- activity        // 运营活动页
二、详细说明
参考大纲说明中的“编译输出目录”，可以发现，有一部分静态资源不受 version 版本控制。
version 版本控制是指编译后会被输出到 vx.x.x 目录中，这里的 version 版本即 vx.x.x 对应着项目迭代 master 分支上的 tag 版本。
不受 version 控制的资源主要为外部引用的第三方库，这些库主要由 自身版本 所控制。

// 自身版本规则
项目名 + '-' + 版本号 

// 例如:
jquery-1.11.2.js
2.1 非 version 版本控制
2.1.1 plugins
目录说明
该目录主要存放第三方插件，插件包含某一块功能完整解决方案，该插件封装了完整的 dom、样式以及js交互。

// 举例
plugins
|-- layer-3.0.2        // 弹窗插件
|-- layer-3.0.3
|-- mathjax-2.7.0    // 公式解析插件
|-- mathjax-2.7.0
|-- echarts-3.0        // 图表插件
|-- ...
plugins 使用页面标签来引用，例如：

<link  href="//static.kaike.la/plugins/layer-3.0.2/layer.css" rel="stylesheet" type="text/css">
<script src="//static.kaike.la/plugins/layer-3.0.2/layer.js"></script>
2.1.2 libs
目录说明
libs 目录用于存放第三方js库，该库包含某一块js功能，相较于plugins,它不包含dom与样式。

libs
|-- jquery-1.9.1.js
|-- jquery-1.11.2.js
|-- md5-1.0.js
|-- ...
libs 使用页面标签来引用，例如：

<script src="//static.kaike.la/libs/jquery-1.9.1.js"></script>
2.1.3 swf
目录说明
用于存放网站的 swf 文件

swf
|-- Aliveplayer1.1.0.swf
|-- Aliveplayer1.2.0.swf
|-- hlsplayer1.1.0.swf
|-- rotate-player2.2.0.swf
|-- ..
2.1.4 school
目录说明
school 目录用于存放从老系统迁移过来的静态资源，老系统是指 //static.kaike.la/school/* 中的静态资源，资源存放路径与以前的路径尽量保持相同。

// 举例
school
|-- css
|-- images
|-- js
    |-- circle
        + topic_detail.js
        + ...
    |-- course
    |-- ...
     + learn.js
     + class-exam.js
     + ...
|-- img
2.1.4 activity
目录说明
用于存放运营页相关文件，以页面为单位

activity
|-- pagea
|-- pageb
2.2 version 版本控制
2.2.1 img
目录说明：
在 html 页面中 已 img 便签形式引用的图片存放在此目录中

文件存放路径规则：
img/域名/页面/文件名

例如：
img
|-- common             // 整站公共图片
|-- fm                // 成长驿站
|-- live            // 直播
|-- member            // 个人中心
|-- community             // 社区
    |-- index            // 首页
    |-- talk             // 说说页
        + demo1.png            // demo1.png文件
        + demo2.img            // demo2.png文件
    |-- circle            //圈子页
demo1.png 使用示例：
<img src="//static.kaike.la/v2.1.0/img/community/talk/demo1.png" alt="demo1.png">
2.2.2 js
目录说明
js

/**
* js/libs 与 libs中可能有相同的文件，比如jquery
* 区别在于引用的方式不同，
*   libs中的文件由页面标签引用，
*   js/libs中的文件由页面js 通过require的方式引用，最终被 webpack 打包到页面js中
*/
|-- libs
    |-- echarts
         + radar.js
         + line.js
     + jquery.js

/**
* 提取出来的公共js模块
*/
|-- modules
     + exam.js
     + kkl_request.js
     + fm_player.js

/**
* 提取出来的公共组件
* 与modules不同的是，widgets中的组件会有配套的样式以及dom，
* 在less目录中有widgets文件与之对应
*/
|-- widgets
     + paging.js    // 公共分页插件
     + popup.js    // 公共弹窗

/**
* 将页面直接引用的js
* /page/域/页面
*/
|-- page
    |-- common             // 整站公共js
        |-- kkl
             + index.js    // js入口文件
             + kkl_part1.js    // js模块文件
             + kkl_part2.js    // js模块文件
             + ...
         + ...
    |-- fm
    |-- member_center        // 域
        |-- common        // 域公共js
        |-- myorder        // 页面
             + index.js    // 页面 js 入口文件
             + myorder_part1.js // 页面js模块文件
             + ...
        |-- myinfo
    |-- study_center
    |-- community
    |-- ...
js 经过 webpack 打包之后，只输出 page 目录下的文件，且只输出 page 页面下的 index.js 入口文件，其他文件将被打包到入口文件中。

2.2.3 less
目录说明
less
|-- bg                // 被css background 引用的图片资源
    |-- /域/页面
|-- iconfont            // 字体
|-- component            // 提取的公共样式组件
     + button.less
     + form.less
     + table.less
     + tab.less
     + ...
|-- helps
     + function.less
     + mixins.less
|-- themes
|-- widgets
     + paging.less        // 公共分页插件
     + popup.less        // 公共弹窗
|-- page
    |-- common         // 整站公共样式
        |-- kkl
             + index.less        // less入口文件
             + kkl_part1.less    // less模块文件
             + kkl_part2.less    // less模块文件
             + ...
         + ...
    |-- member_center        // 域
        |-- common        // 域公共less
        |-- myorder        // 页面
             + index.less    // 页面 less 入口文件
             + myorder_part1.less // 页面js模块文件
             + ...
    |-- ...





代码提交规范
编写文档
所有功能点尽量提交配套文档，文档建议满足以下要求。

说清楚问题的几个方面：what（是什么），why（为什么），how（怎么做），可根据问题的特性有所侧重。 how 部分包含详尽完整的操作步骤，必要时附上 可运行 的范例代码。 提供必要的链接，如术语解释和参考文档等。

提交代码
提交Merge Request
创建分支修改代码后提交MR合并到主干分支

由于谁也无法保证过了多久之后还记得多少，为了后期回溯历史的方便，提交 MR 时可提供以下信息。

需求点
升级原因（可以简要描述下为什么要处理）
关注点（针对用户而言，一般是不兼容更新等，需要额外提示）
代码风格（待执行）
你的代码风格必须通过 eslint，你可以运行 $ npm run lint 本地测试。

Commit提交规范
根据以下规范提交 commit， 这样 history 看起来更加清晰，还可以自动生成 changelog。

<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>
1. type
提交 commit 的类型，包括以下几种

feat: 新功能
fix: 修复问题
docs: 修改文档
style: 修改代码格式，不影响代码逻辑
refactor: 重构代码，理论上不影响现有功能
perf: 提升性能
test: 增加修改测试用例
chore: 修改工具相关（包括但不限于文档、代码生成等）
deps: 升级依赖
2.scope
修改文件的范围（包括但不限于 doc, middleware, core, config, plugin）

3.subject
用一句话清楚的描述这次提交做了什么

4.body
补充 subject，适当增加原因、目的等相关因素，也可不写。

5.footer
当有非兼容修改(Breaking Change)时必须在这里描述清楚

example:
  refactor(kkl.js): [BREAKING_CHANGE] 公共侧栏修改
  原有的XXX不合理，会导致XXXXX
  为配合XX需求，增加XX功能
  BREAKING CHANGE:
  Dom结构变动，需要同步kkl.css v2.X版本





发布管理
基于 semver 语义化版本号进行发布。

分支策略
master 分支为当前稳定发布的版本

发布策略
每个大版本都有一个发布管理的负责人，他/她要做的事情

准备工作：
发布前：
发布时：



HTML
语法
缩进使用soft tab（4个空格）； 嵌套的节点应该缩进； 在属性上，使用双引号，不要使用单引号； 属性名全小写，用中划线做分隔符； 不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）； 不要忽略可选的关闭标签，例：</li>和 </body>。

<!DOCTYPE html>
<html>
    <head>
        <title>Page title</title>
    </head>
    <body>
        <img src="images/company_logo.png" alt="Company">

        <h1 class="hello-world">Hello, world!</h1>
    </body>
</html>
HTML5 doctype
在页面开头使用这个简单地doctype来启用标准模式，使其在每个浏览器中尽可能一致的展现；

虽然doctype不区分大小写，但是按照惯例，doctype大写

lang属性
根据HTML5规范：

应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。
更多关于 lang 属性的说明在这里；

在sitepoint上可以查到语言列表；

但sitepoint只是给出了语言的大类，例如中文只给出了zh，但是没有区分香港，台湾，大陆。而微软给出了一份更加详细的语言列表.aspx)，其中细分了zh-cn, zh-hk, zh-tw。

字符编码
通过声明一个明确的字符编码，让浏览器轻松、快速的确定适合网页内容的渲染方式，通常指定为'UTF-8'。

<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
    </head>
    ...
</html>
SEO友好
/* 必须要有 */
<title>网页标题</title>

/* 不是必须有 */
<meta name="keywords" content="网页关键字">

/* 建议有 */
<meta name="description" content="网页主要内容描述">

/* favicon图标 */
<link rel="shortcut icon" href="/favicon.ico">
添加适当关键字在html代码里.img图片要加上alt标签

学习使用h1,h2,h3,h4等SEO权重较高的标签

IE兼容模式
用 <meta> 标签可以指定页面应该用什么版本的IE来渲染；

如果你想要了解更多，请点击这里；

不同doctype在不同浏览器下会触发不同的渲染模式（这篇文章总结的很到位）。

<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <meta name="renderer" content="webkit">
    </head>
    ...
</html>
引入CSS, JS
根据HTML5规范, 通常在引入CSS和JS时不需要指明 type，因为 text/css 和 text/javascript 分别是他们的默认值

属性顺序
属性应该按照特定的顺序出现以保证易读性；

1. class
2. id
3. name
4. data-*
5. src, for, type, href, value , max-length, max, min, pattern
6. placeholder, title, alt
7. aria-*, role
8. required, readonly, disabled
9. class是为高可复用组件设计的，所以应处在第一位；
id更加具体且应该尽量少使用，所以将它放在第二位。

<a class="..." id="..." data-modal="toggle" href="#">Example link</a>

<input class="form-control" type="text">

<img src="..." alt="...">
boolean属性
boolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；

更多内容可以参考 WhatWG section on boolean attributes：

boolean属性的存在表示取值为true，不存在则表示取值为false。

<input type="text" disabled>

<input type="checkbox" value="1" checked>

<select>
    <option value="1" selected>1</option>
</select>
减少标签数量
在编写HTML代码时，需要尽量避免多余的父节点；

很多时候，需要通过迭代和重构来使HTML变得更少。

实用高于完美
尽量遵循HTML标准和语义，但是不应该以浪费实用性作为代价；

任何时候都要用尽量小的复杂度和尽量少的标签来解决问题。







CSS
语法
为选择器分组时，将单独的选择器单独放在一行。

为了代码的易读性，在每个声明块的左花括号前添加一个空格。

声明块的右花括号应当单独成行。

每条声明语句的 : 后应该插入一个空格。

为了获得更准确的错误报告，每条声明都应该独占一行。

所有声明语句都应当以分号结尾。最后一条声明语句后面的分号是可选的，但是，如果省略这个分号，你的代码可能更易出错。

对于以逗号分隔的属性值，每个逗号后面都应该插入一个空格（例如，box-shadow）。

不要在 rgb()、rgba()、hsl()、hsla() 或 rect() 值的内部的逗号后面插入空格。这样利于从多个属性值（既加逗号也加空格）中区分多个颜色值（只加逗号，不加空格）。

对于属性值或颜色参数，省略小于 1 的小数前面的 0 （例如，.5 代替 0.5；-.5px 代替 -0.5px）。

十六进制值应该全部小写，例如，#fff。在扫描文档时，小写字符易于分辨，因为他们的形式更易于区分。

尽量使用简写形式的十六进制值，例如，用 #fff 代替 #ffffff。 为选择器中的属性添加双引号，例如，input[type="text"]。只有在某些情况下是可选的，但是，为了代码的一致性，建议都加上双引号。

避免为 0 值指定单位，例如，用 margin: 0; 代替 margin: 0px;。

/* Bad CSS */
.selector, .selector-secondary, .selector[type=text] {
  padding:15px;
  margin:0px 0px 15px;
  background-color:rgba(0, 0, 0, 0.5);
  box-shadow:0px 1px 2px #CCC,inset 0 1px 0 #FFFFFF
}

/* Good CSS */
.selector,
.selector-secondary,
.selector[type="text"] {
  padding: 15px;
  margin-bottom: 15px;
  background-color: rgba(0,0,0,.5);
  box-shadow: 0 1px 2px #ccc, inset 0 1px 0 #fff;
}
命名 [BEM 规范]
使用 BEM 命名规范，理论上讲，每行 css 代码都只有一个选择器。

BEM代表“块（block）,元素（element）,修饰符（modifier）”, 常用这三个实体开发组件。

参考:

BEM Naming
BEM的优势
在选择器中，由以下三种符合来表示扩展的关系：

-   中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。
__  双下划线：双下划线用来连接块和块的子元素
_   单下划线：单下划线用来描述一个块或者块的子元素的一种状态(modifier的写法略有不同)

type-block__element_modifier
块（block）
一个块是设计或布局的一部分，它有具体且唯一地意义 ，要么是语义上的要么是视觉上的。

在大多数情况下，任何独立的页面元素（或复杂或简单）都可以被视作一个块。它的HTML容器会有一个唯一的CSS类名，也就是这个块的名字。

针对块的CSS类名会加一些前缀（ ui- ），这些前缀在CSS中有类似 命名空间 的作用。

一个块的正式（实际上是半正式的）定义有下面三个基本原则：

1. CSS中只能使用类名（不能是ID）。

2. 每一个块名应该有一个命名空间（前缀）

3. 每一条CSS规则必须属于一个块。
例如：一个自定义列表 .list 是一个块，通常自定义列表是算在 mod 类别的，在这种情况下，一个 list 列表的block写法应该为:

.list
元素（element）
块中的子元素是块的子元素，并且子元素的子元素在 bem 里也被认为是块的直接子元素。一个块中元素的类名必须用父级块的名称作为前缀。

如上面的例子，li.item 是列表的一个子元素，

.list{}
.list .item{}

.list{}
.list__item{}
修饰符（modifier）
一个“修饰符”可以理解为一个块的特定状态，标识着它持有一个特定的属性。

用一个例子来解释最好不过了。一个表示按钮的块默认有三个大小：小，中，大。为了避免创建三个不同的块，最好是在块上加修饰符。这个修饰符应该有个名字（比如：size ）和值（ small，normal 或者 big ）。

如上面的例子中，表示一个选中的列表，和一个激活的列表项

.list{}
.list.select{}
.list .item{}
.list .item.active{}

.list{}
.list_select{}
.list__item{}
.list__item_active{}
BEM解决问题
组件之间的完全解耦，不会造成命名空间的污染，如：.mod-xxx ul li 的写法带来的潜在的嵌套风险。

LESS 书写规范
使用 .less 后缀的文件来存储变量、混合代码以及最终合并压缩。

子less	注解
lib-base.less	预定义的变量，例如颜色、字号、字体
lib-mixins.less	用于混合的代码，例如渐变、半透明的混合
lib-reset.less	初始化
lib-ui.less	颗粒化ui功能
xxx.less	模块样式
.less 文件的引用顺序会对最终编译的样式的作用域和优先级产生影响，请尽量按照由底层到自定义的顺序来引用。

书写原则
1. 原则上不会出现2层以上选择器嵌套
使用BEM原则，用命名来解耦，所有类名都为一层，增加效率和复用性

2. 两层选择器嵌套出现在.mod-xxx__item_current子元素的情况，如下：
使用推荐的嵌套写法

常规写法：

.xxx{}
.xxx__item{}
.xxx__item_current{}
// 嵌套写法
.xxx__item_current .mod-xxx__link{}
推荐：

.xxx{}
.xxx__item{}
.xxx__item_hightlight{}
.xxx__product-name{}
.xxx__link{}
.xxx__ming-zi-ke-yi-hen-chang{}

// 嵌套写法
.xxx__item_current{
    .xxx__link{}
}
对应的HTML结构如下：

<ul class="xxx">
    <li class="xxx__item">第一项
        <div class="xxx__product-name">我是名称</div>
        <span class="xxx__ming-zi-ke-yi-hen-chang">看类名</span>
        <a href="#" class="xxx__link">我是link</a>
    <li>
    <li class="xxx__item xxx__item_current">第二项 且 当前选择项
        <div class="xxx__product-name">我是名称</div>
        <a href="#" class="xxx__item-link">我是link</a>
    <li>
    <li class="xxx__item xxx__item_hightlight">第三项 且 特殊高亮
         <div class="xxx__product-name">我是名称</div>
        <a href="#" class="xxx__item-link">我是link</a>
    <li>
</ul>
缩进
soft tab (4个空格)

换行
以下几种情况不需要换行：

'{'前
以下几种情况需要换行：

'{'后和'}'前
每个属性独占一行
多个规则的分隔符','后
/* not good */
.element
{color: red; background-color: black;}

/* good */
.element {
    color: red;
    background-color: black;
}

/* not good */
.element, .dialog {
    ...
}

/* good */
.element,
.dialog {
    ...
}
空行
以下几种情况需要空行：

文件最后保留一个空行
'}'后最好跟一个空行，包括scss中嵌套的规则
属性之间需要适当的空行，具体见属性声明顺序
/* not good */
.element {
    ...
}
.dialog {
    color: red;
    &:after {
        ...
    }
}

/* good */
.element {
    ...
}

.dialog {
    color: red;

    &:after {
        ...
    }

}
注释
注释统一用'/ /'（scss中也不要用'//'）；

缩进与下一行代码保持一致；

可位于一个代码行的末尾，与代码间隔一个空格。

/* Modal header */
.modal-header {
    ...
}

/*
 * Modal header
 */
.modal-header {
    ...
}

.modal-header {
    /* 50px */
    width: 50px;

    color: red; /* color red */
}
引号
最外层统一使用双引号 url的内容要用引号 属性选择器中的属性值需要引号

.element:after {
    content: "";
    background-image: url("logo.png");
}

li[data-type="single"] {
    ...
}
属性声明顺序
相关的属性声明应当归为一组，并按照下面的顺序排列：

Positioning Box model Typographic Visual 由于定位（positioning）可以从正常的文档流中移除元素，并且还能覆盖盒模型（box model）相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。

其他属性只是影响组件的内部（inside）或者是不影响前两组属性，因此排在后面。

.declaration-order {
    display: block;
    float: right;

    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 100;

    border: 1px solid #e5e5e5;
    border-radius: 3px;
    width: 100px;
    height: 100px;

    font: normal 13px "Helvetica Neue", sans-serif;
    line-height: 1.5;
    text-align: center;

    color: #333;
    background-color: #f5f5f5;

    opacity: 1;
}
// 下面是推荐的属性的顺序
[
    [
        "display",
        "visibility",
        "float",
        "clear",
        "overflow",
        "overflow-x",
        "overflow-y",
        "clip",
        "zoom"
    ],
    [
        "table-layout",
        "empty-cells",
        "caption-side",
        "border-spacing",
        "border-collapse",
        "list-style",
        "list-style-position",
        "list-style-type",
        "list-style-image"
    ],
    [
        "-webkit-box-orient",
        "-webkit-box-direction",
        "-webkit-box-decoration-break",
        "-webkit-box-pack",
        "-webkit-box-align",
        "-webkit-box-flex"
    ],
    [
        "position",
        "top",
        "right",
        "bottom",
        "left",
        "z-index"
    ],
    [
        "margin",
        "margin-top",
        "margin-right",
        "margin-bottom",
        "margin-left",
        "-webkit-box-sizing",
        "-moz-box-sizing",
        "box-sizing",
        "border",
        "border-width",
        "border-style",
        "border-color",
        "border-top",
        "border-top-width",
        "border-top-style",
        "border-top-color",
        "border-right",
        "border-right-width",
        "border-right-style",
        "border-right-color",
        "border-bottom",
        "border-bottom-width",
        "border-bottom-style",
        "border-bottom-color",
        "border-left",
        "border-left-width",
        "border-left-style",
        "border-left-color",
        "-webkit-border-radius",
        "-moz-border-radius",
        "border-radius",
        "-webkit-border-top-left-radius",
        "-moz-border-radius-topleft",
        "border-top-left-radius",
        "-webkit-border-top-right-radius",
        "-moz-border-radius-topright",
        "border-top-right-radius",
        "-webkit-border-bottom-right-radius",
        "-moz-border-radius-bottomright",
        "border-bottom-right-radius",
        "-webkit-border-bottom-left-radius",
        "-moz-border-radius-bottomleft",
        "border-bottom-left-radius",
        "-webkit-border-image",
        "-moz-border-image",
        "-o-border-image",
        "border-image",
        "-webkit-border-image-source",
        "-moz-border-image-source",
        "-o-border-image-source",
        "border-image-source",
        "-webkit-border-image-slice",
        "-moz-border-image-slice",
        "-o-border-image-slice",
        "border-image-slice",
        "-webkit-border-image-width",
        "-moz-border-image-width",
        "-o-border-image-width",
        "border-image-width",
        "-webkit-border-image-outset",
        "-moz-border-image-outset",
        "-o-border-image-outset",
        "border-image-outset",
        "-webkit-border-image-repeat",
        "-moz-border-image-repeat",
        "-o-border-image-repeat",
        "border-image-repeat",
        "padding",
        "padding-top",
        "padding-right",
        "padding-bottom",
        "padding-left",
        "width",
        "min-width",
        "max-width",
        "height",
        "min-height",
        "max-height"
    ],
    [
        "font",
        "font-family",
        "font-size",
        "font-weight",
        "font-style",
        "font-variant",
        "font-size-adjust",
        "font-stretch",
        "font-effect",
        "font-emphasize",
        "font-emphasize-position",
        "font-emphasize-style",
        "font-smooth",
        "line-height",
        "text-align",
        "-webkit-text-align-last",
        "-moz-text-align-last",
        "-ms-text-align-last",
        "text-align-last",
        "vertical-align",
        "white-space",
        "text-decoration",
        "text-emphasis",
        "text-emphasis-color",
        "text-emphasis-style",
        "text-emphasis-position",
        "text-indent",
        "-ms-text-justify",
        "text-justify",
        "letter-spacing",
        "word-spacing",
        "-ms-writing-mode",
        "text-outline",
        "text-transform",
        "text-wrap",
        "-ms-text-overflow",
        "text-overflow",
        "text-overflow-ellipsis",
        "text-overflow-mode",
        "-ms-word-wrap",
        "word-wrap",
        "-ms-word-break",
        "word-break"
    ],
    [
        "color",
        "background",
        "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader",
        "background-color",
        "background-image",
        "background-repeat",
        "background-attachment",
        "background-position",
        "-ms-background-position-x",
        "background-position-x",
        "-ms-background-position-y",
        "background-position-y",
        "-webkit-background-clip",
        "-moz-background-clip",
        "background-clip",
        "background-origin",
        "-webkit-background-size",
        "-moz-background-size",
        "-o-background-size",
        "background-size"
    ],
    [
        "outline",
        "outline-width",
        "outline-style",
        "outline-color",
        "outline-offset",
        "opacity",
        "filter:progid:DXImageTransform.Microsoft.Alpha(Opacity",
        "-ms-filter:\\'progid:DXImageTransform.Microsoft.Alpha",
        "-ms-interpolation-mode",
        "-webkit-box-shadow",
        "-moz-box-shadow",
        "box-shadow",
        "filter:progid:DXImageTransform.Microsoft.gradient",
        "-ms-filter:\\'progid:DXImageTransform.Microsoft.gradient",
        "text-shadow"
    ],
    [
        "-webkit-transition",
        "-moz-transition",
        "-ms-transition",
        "-o-transition",
        "transition",
        "-webkit-transition-delay",
        "-moz-transition-delay",
        "-ms-transition-delay",
        "-o-transition-delay",
        "transition-delay",
        "-webkit-transition-timing-function",
        "-moz-transition-timing-function",
        "-ms-transition-timing-function",
        "-o-transition-timing-function",
        "transition-timing-function",
        "-webkit-transition-duration",
        "-moz-transition-duration",
        "-ms-transition-duration",
        "-o-transition-duration",
        "transition-duration",
        "-webkit-transition-property",
        "-moz-transition-property",
        "-ms-transition-property",
        "-o-transition-property",
        "transition-property",
        "-webkit-transform",
        "-moz-transform",
        "-ms-transform",
        "-o-transform",
        "transform",
        "-webkit-transform-origin",
        "-moz-transform-origin",
        "-ms-transform-origin",
        "-o-transform-origin",
        "transform-origin",
        "-webkit-animation",
        "-moz-animation",
        "-ms-animation",
        "-o-animation",
        "animation",
        "-webkit-animation-name",
        "-moz-animation-name",
        "-ms-animation-name",
        "-o-animation-name",
        "animation-name",
        "-webkit-animation-duration",
        "-moz-animation-duration",
        "-ms-animation-duration",
        "-o-animation-duration",
        "animation-duration",
        "-webkit-animation-play-state",
        "-moz-animation-play-state",
        "-ms-animation-play-state",
        "-o-animation-play-state",
        "animation-play-state",
        "-webkit-animation-timing-function",
        "-moz-animation-timing-function",
        "-ms-animation-timing-function",
        "-o-animation-timing-function",
        "animation-timing-function",
        "-webkit-animation-delay",
        "-moz-animation-delay",
        "-ms-animation-delay",
        "-o-animation-delay",
        "animation-delay",
        "-webkit-animation-iteration-count",
        "-moz-animation-iteration-count",
        "-ms-animation-iteration-count",
        "-o-animation-iteration-count",
        "animation-iteration-count",
        "-webkit-animation-direction",
        "-moz-animation-direction",
        "-ms-animation-direction",
        "-o-animation-direction",
        "animation-direction"
    ],
    [
        "content",
        "quotes",
        "counter-reset",
        "counter-increment",
        "resize",
        "cursor",
        "-webkit-user-select",
        "-moz-user-select",
        "-ms-user-select",
        "user-select",
        "nav-index",
        "nav-up",
        "nav-right",
        "nav-down",
        "nav-left",
        "-moz-tab-size",
        "-o-tab-size",
        "tab-size",
        "-webkit-hyphens",
        "-moz-hyphens",
        "hyphens",
        "pointer-events"
    ]
]







JavaScript
空格
以下几种情况需要空格：

二元运算符前后

三元运算符'?:'前后

代码块'{'前

下列关键字前：else, while, catch, finally

下列关键字后：if, else, for, while, do, switch, case, try, catch, finally, with, return, typeof

单行注释'//'后（若单行注释和代码同行，则'//'前也需要），多行注释'*'后

对象的属性值前

for循环，分号后留有一个空格，前置条件如果有多个，逗号后留一个空格

无论是函数声明还是函数表达式，'{'前一定要有空格

函数的参数之间

// not good
var a = {
    b :1
};

// good
var a = {
    b: 1
};

// not good
++ x;
y ++;
z = x?1:2;

// good
++x;
y++;
z = x ? 1 : 2;

// not good
var a = [ 1, 2 ];

// good
var a = [1, 2];

// not good
var a = ( 1+2 )*3;

// good
var a = (1 + 2) * 3;

// no space before '(', one space before '{', one space between function parameters
var doSomething = function(a, b, c) {
    // do something
};

// no space before '('
doSomething(item);

// not good
for(i=0;i<6;i++){
    x++;
}

// good
for (i = 0; i < 6; i++) {
    x++;
}
变量命名
标准变量采用驼峰式命名（除了对象的属性外，主要是考虑到cgi返回的数据）

'ID'在变量名中全大写

'URL'在变量名中全大写

'Android'在变量名中大写第一个字母

'iOS'在变量名中小写第一个，大写后两个字母

常量全大写，用下划线连接

构造函数，大写第一个字母

jquery对象以'$'开头命名

var thisIsMyName;

var goodID;

var reportURL;

var AndroidVersion;

var iOSVersion;

var MAX_COUNT = 10;

function Person(name) {
    this.name = name;
}

// not good
var body = $('body');

// good
var $body = $('body');
变量声明
一个函数作用域中所有的变量声明尽量提到函数首部，用一个var声明。

function doSomethingWithItems(items) {
    // use one var
    var value = 10,
        result = value + 10,
        i,
        len;

    for (i = 0, len = items.length; i < len; i++) {
        result += 10;
    }
}
函数
无论是函数声明还是函数表达式，'('前不要空格，但'{'前一定要有空格；

函数调用括号前不需要空格；

立即执行函数外必须包一层括号；

不要给inline function命名；

参数之间用', '分隔，注意逗号后有一个空格。

// no space before '(', but one space before'{'
var doSomething = function(item) {
    // do something
};

function doSomething(item) {
    // do something
}

// not good
doSomething (item);

// good
doSomething(item);

// requires parentheses around immediately invoked function expressions
(function() {
    return 1;
})();

// not good
[1, 2].forEach(function x() {
    ...
});

// good
[1, 2].forEach(function() {
    ...
});

// not good
var a = [1, 2, function a() {
    ...
}];

// good
var a = [1, 2, function() {
    ...
}];

// use ', ' between function parameters
var doSomething = function(a, b, c) {
    // do something
};
数组、对象
对象属性名不需要加引号；

对象以缩进的形式书写，不要写在一行；

数组、对象最后不要有逗号。

// not good
var a = {
    'b': 1
};

var a = {b: 1};

var a = {
    b: 1,
    c: 2,
};

// good
var a = {
    b: 1,
    c: 2
};
undefined
永远不要直接使用undefined进行变量判断；

使用typeof和字符串'undefined'对变量进行判断。

// not good
if (person === undefined) {
    ...
}

// good
if (typeof person === 'undefined') {
    ...
}
null
适用场景：

初始化一个将来可能被赋值为对象的变量
与已经初始化的变量做比较
作为一个参数为对象的函数的调用传参
作为一个返回对象的函数的返回值
不适用场景：

不要用null来判断函数调用时有无传参
不要与未初始化的变量做比较
// not good
function test(a, b) {
    if (b === null) {
        // not mean b is not supply
        ...
    }
}

var a;

if (a === null) {
    ...
}

// good
var a = null;

if (a === null) {
    ...
}
单行注释
双斜线后，必须跟一个空格；

缩进与下一行代码保持一致；

可位于一个代码行的末尾，与代码间隔一个空格。

if (condition) {
    // if you made it here, then all security checks passed
    allowed();
}

var zhangsan = 'zhangsan'; // one space after code
文档注释
各类标签@param, @method等请参考usejsdoc和JSDoc Guide；

建议在以下情况下使用：

所有常量
所有函数
所有类
/**
 * @func
 * @desc 一个带参数的函数
 * @param {string} a - 参数a
 * @param {number} b=1 - 参数b默认值为1
 * @param {string} c=1 - 参数c有两种支持的取值</br>1―表示x</br>2―表示xx
 * @param {object} d - 参数d为一个对象
 * @param {string} d.e - 参数d的e属性
 * @param {string} d.f - 参数d的f属性
 * @param {object[]} g - 参数g为一个对象数组
 * @param {string} g.h - 参数g数组中一项的h属性
 * @param {string} g.i - 参数g数组中一项的i属性
 * @param {string} [j] - 参数j是一个可选参数
 */
function foo(a, b, c, d, g, j) {
    ...
}
引号
最外层统一使用单引号。

// not good
var x = "test";

// good
var y = 'foo',
    z = '<div id="test"></div>';
括号
下列关键字后必须有大括号（即使代码块的内容只有一行）： if, else, for, while, do, switch, try, catch, finally, with。

// not good
if (condition)
    doSomething();

// good
if (condition) {
    doSomething();
}








兼容性标准
概述：

要完整支持(100%还原设计稿和UED文档)chrome firefox safari IE10(包含IE10)以上内核浏览器

对IE 7 8 9 要求不影响用户正常使用

IE6内核可用

web主站部分
兼容浏览器列表
IE6	IE7及以上	Firefox	Chrome、搜狗等现代浏览器
注册登录激活流程的正常使用	支持	支持	支持	支持
页面整体的布局排版正常显示	支持	支持	支持	支持
动画等动态展示效果	不支持	支持	支持	支持
录播课程的正常播放	支持	支持	支持	支持
心理FM音频的正常播放	支持	支持	支持	支持
图文混排的排版正常	不支持	支持	支持	支持
文本对齐与输入框的细节控制	不支持	支持	支持	支持
直播课程的观看	不支持	支持	支持	支持
通用的元素间距规范	不支持	支持	支持	支持
CSS的3.0样式支持	不支持	支持	支持	支持
Flash的插件支持	友好提示	友好提示	友好提示	友好提示


兼容性标准
重点兼容列表:

要求：高度美观、交互性强、实现需求

浏览器名	版本要求
Google Chrome	31+
IE9+	
QQ浏览器	7.0+
搜狗高速浏览器	5.0+
360浏览器	6.0+


一般兼容列表:

要求：美观、交互流畅、实现需求

浏览器名	版本要求
IE8	
2345浏览器	6.0+
猎豹浏览器	4.0+
Firefox	28+
Spartan	6.0+
360极速浏览器	7.5+

次要兼容列表:

要求：美观、交互流畅、实现需求

浏览器名	版本要求
IE7	
Safari	6.0+
UBrowser	4.0+
移动端部分
hybrid页面

平台	系统版本	分辨率
iOS	4.0+	*
Android	7.0+	*


普通H5页面

平台	系统版本	分辨率
iOS	4.4+	iPhone4-7
Android	7.0+	*


微信端H5页面

平台	系统版本	分辨率	微信版本
iOS	4.4+	iPhone4-7	6.2.0+
Android	7.0+	*	6.3.0+





语言兼容性
兼容性参考CanIUse https://caniuse.com/

html5兼容性参考  https://caniuse.com/#cats=HTML5
css兼容性  https://caniuse.com/#cats=CSS
jsapi兼容性 https://caniuse.com/#cats=JS%20API